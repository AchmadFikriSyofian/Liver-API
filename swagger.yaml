openapi: 3.0.3
info:
  title: Liver MOOC (Massive Open Online Course)
  description: |-
    Dokumentasi ini menyediakan panduan lengkap untuk mengakses dan menggunakan API Liver MOOC (Massive Open Online Course). MOOC adalah platform pembelajaran daring yang menyediakan akses terbuka untuk berbagai kursus dari berbagai bidang, memungkinkan pengguna untuk belajar secara fleksibel sesuai dengan kebutuhan mereka.

    Rangkuman Fitur Utama:
    1. Daftar Kategori Kursus:
        - Endpoint: `/api/v1/categories`
        - Deskripsi: Mendapatkan daftar semua kategori kursus yang tersedia di Liver MOOC
        
    2. Detail Kategori dan Kursus:
        - Endpoint: `/api/v1/categories/detail/:id`
        - Deskripsi: Mendapatkan detail kategori tertentu beserta kursus yang terkait
        
    3. Search 
        - Endpoint: /api/v1/course/search
        - Deskripsi: mencari course berdasarkan nama

    4. Filter
        - Endpoint: /api/v1/course/filter
        - Deskripsi: mendapatkan courses berdasarkan category, level, promo 

    5. Course Detail:
        - Endpoint: `/api/v1/course/details/:id`
        - Deskripsi: Mendapatkan detail dari kursus tertentu

    6. Register:
        - Endpoint: `/api/v1/auth/register`
        - Deskripsi: Membuat akun baru beserta dengan OTP
    
    7. Verify:
        - Endpoint: `/api/v1/auth/verify`
        - Deskripsi:Memasukkan kode OTP yang sudah diberikan melalui Email saat registrasi
  contact:
    email: livercourse.7@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
  - url: liver-backend-develop.up.railway.app/api/v1
  - url: liver-backend-production.up.railway.app/api/v1
tags:
  - name: Categories
    description: Operations related to Categories
  - name: Courses
    description: Operations related to Courses
  - name: Auth
    description: Operations related to Auth
paths:
  /categories:
    get:
      tags:
        - Categories
      operationId: get-fetch-all-categories
      summary: Get all categories
      description: Show all categories.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Number of items per page.
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number for pagination.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          pagination:
                            $ref: "#/components/schemas/Pagination"
                          categories:
                            type: array
                            items:
                              $ref: "#/components/schemas/CategoriesModel"
  /categories/detail/{categoryId}:
    get:
      tags:
        - Categories
      operationId: get-fetch-categories-detail
      summary: Get categories details
      description: Retrieves details of a specific categories along with related courses.
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: The ID of the user to retrieve.
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Number of items per page.
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number for pagination.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      status:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: "Show Categories Detail"
                      data:
                        type: object
                        properties:
                          pagination:
                            $ref: "#/components/schemas/Pagination"
                          category:
                            $ref: "#/components/schemas/CategoriesDetailModel"
  /course/search:
    get:
      tags:
        - Courses
      summary: Find course by name
      description: Get course
      operationId: search
      parameters:
        - name: nama
          in: query
          description: nama untuk search Course
          required: false
          explode: true
          schema: 
            type: string
      responses:
        '200':  
          description: success search
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/CourseModel'
            application/xml:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/CourseModel'
        '400': 
          description: Invalid name
  /course/filter:
    get:
      tags:
        - Courses
      summary: Filter course
      description: Get course berdasarkan filter yg digunakan
      operationId: filter
      parameters:
        - name: category_id
          in: query
          description: category_id of categoriesOnCourses
          required: false
          schema: 
            type: integer
            format: int64
        - name: level
          in: query
          description: level course
          required: false
          schema: 
            type: string
        - name: assignedAt
          in: query
          description: tanggal terbaru
          required: false
          schema: 
            type: string
      responses:
        '200': 
          description: success operation
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/CourseModel'
            application/xml:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/CourseModel'
  /course/details/{courseId}:
    get:
      tags:
        - Courses
      operationId: get-fetch-course-detail
      summary: Get course detail
      description: Retrieves details of a specific course
      parameters:
        - in: path
          name: courseId
          schema:
            type: integer
          required: true
          description: the ID of th course to retrieve.
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        allOf:
                          - $ref: '#/components/schemas/CourseModelDetail'
                          - type: object
                            properties:
                              chapter:
                                allOf:
                                  - $ref: '#/components/schemas/ChapterModel'
                                  - type: object
                                properties:
                                  lesson: 
                                    allOf:
                                      - $ref: '#/components/schemas/LessonModel'
                                      - type: object
                              mentor:
                                $ref: '#/components/schemas/MentorModel'
  /auth/register/:
    post:
      tags:
        - Auth
      operationId: create-new-user
      summary: Create New User
      description: Create new user with OTP
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  example: "johndoe@gmail.com"
                no_hp:
                  type: string
                  example: "0895672091723"
                password:
                  type: string
                  example: "#Johndoe123"
      responses:
        '201':
          description: Successfull Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        allOf:
                          - $ref: '#/components/schemas/RegisterModel'
                          - type: object
  /auth/verify/:
    post:
      tags:
        - Auth
      operationId: post-otp
      summary: Post verify
      description: User enter otp code
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "johndoe@gmail.com"
                otp:
                  type: string
                  example: "150782" 
      responses:
        '201':
          description: Successfull Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        allOf:
                          - $ref: '#/components/schemas/VerifyModel'
                          - type: object
components:
  schemas:
    BasicResponse:
      title: BasicResponse
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "success"
    CategoriesModel:
      title: Categories
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "UI/UX"
    CategoriesDetailModel:
      title: CategoriesDetail
      type: object
      properties:
        category_id:
          type: integer
          example: 13
        course_id:
          type: integer
          example: 20
        course:
          $ref: "#/components/schemas/CourseModel"
    CourseModel:
      title: Course
      type: object
      properties:
        id:
          type: integer
          example: 20
        name:
          type: string
          example: "Python Pemrograman Dasar"
    CourseModelDetail:
      title: CourseModelDetail
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Phyton for Data Scence'
        desc:
          type: string
          example: 'Course ini mempelajari tentang bagaimana menggunakan Node JS untuk pemula'
        price:
          type: string
          example: '200.000'
        level:
          type: string
          example: 'Beginner'
        type:
          type: string
          example: 'isPremium'
    ChapterModel:
      title: ChapterModel
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Chapter 1'
        course_id_chapter:
          type: integer
          example: 7
    LessonModel:
      title: LessonModel
      type: object
      properties:
        name:
          type: string
          example: 'Materi 1'
        video:
          type: string
          example: 'video_url_1'
        desc:
          type: string
          example: 'Description for Lesson 2'
    MentorModel:
      title: MentorModel
      type: object
      properties:
        id:
          type: integer
          example: 5
        name:
          type: string
          example: 'John'
    RegisterModel:
      title: RegisterModel
      type: object
      properties:
        name:
          type: string
          example: "john doe"
        email:
          type: string
          example: "john.doe@gmail.com"
        no_hp:
          type: string
          example: "08961283123"
        password:
          type: string
          example: "#Johndoe123"
    VerifyModel:
      title: VerifyModel
      type: object
      properties:
        email:
          type: string
          example: "john.doe@gmail.com"
        otp:
          type: string
          example: "816209"
        
    Pagination:
      title: Pagination
      type: object
      properties:
        links:
          type: object
          properties:
            next:
              type: string
              example: "https://domain.com/categories?limit=10&page=3"
            prev:
              type: string
              example: "https://domain.com/categories?limit=10&page=1"
        total_items:
          type: integer
          example: 100
